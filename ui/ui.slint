import "font/CoffeCake.ttf";
import "font/ARCO.ttf";
import "font/Super Foods.ttf";

import { Button } from "generic/button.slint";
import { ControlBar } from "custom/controlbar.slint";
import { TitleBar } from "custom/titlebar.slint";
import { SettingsPage } from "custom/settingspage.slint";

/*

To Do:
- Fix window size bug

*/

export component Flow inherits Window {
	
	in property <int> backup-minutes: 25;
	in property <int> backup-seconds: 0;
	
	property <int> minutes: 25;
	property <int> seconds: 0;
	
	property <bool> timerOn: false;
	property <bool> settingspage-open: false;

    callback buttonPressed(string);
	callback tick(duration);
	callback sendMinutes(string);
	callback sendSeconds(string);
	callback reset;
	
	forward-focus: key-handler;

    default-font-family: "Super Foods";

	min-height: 380px;
	min-width: 420px;

    background: #5583a8;
	
	title: "Flow Beta 1.2.0 by Sliced Technologies";
	no-frame: false;

    verticalLayout := VerticalLayout {

        alignment: space-between;

        padding: 15px;

        TitleBar {
            height: 15%;

            buttonPressed(id) => {
                if (id == "settings") {
					settingspage-open = !settingspage-open;
				}
            }
        }

        clock := Text {

            horizontal-alignment: center;

            text: FixTimeValue(minutes) + ":" + FixTimeValue(seconds);
            font-size: 70px;
        }
        
        ControlBar {
            height: 20%;

            buttonPressed(id) => {
                if (id == "play" && !settingspage-open) {
					timerOn = true;
				} else if (id == "pause" && !settingspage-open) {
					timerOn = false;
				} else if (id == "stop" && !settingspage-open) {
					timerOn = false;
					minutes = backup-minutes;
					seconds = backup-seconds;
				}
            }
        }

    }
	
	centerPoint := Rectangle {
		background: transparent;
	}

	settingspage := SettingsPage {
		background: #5583a8.darker(30%);
		width: 100%;
		height: 95%;
		y: settingspage-open ? centerPoint.y + 150px : centerPoint.y + 2000px;
		border-radius: 10px;
		
		animate y {
			delay: 0s;
			duration: 0.5s;
			easing: ease-in-out;
		}
		
		sendMinutes(value) => {
			sendMinutes(value);
		}
		
		sendSeconds(value) => {
			sendSeconds(value);
		}

		close-settings-page => {
			settingspage-open = false;
		}
	
	}
	
	key-handler := FocusScope {
		key-pressed(event) => {
			if (event.text == Key.Control) {
				settingspage-open = !settingspage-open;
			}
			
			if (event.text == Key.Escape && settingspage-open) {
				settingspage-open = false;
			}
			
			accept
		}
	}
	
	function FixTimeValue(value: int) -> string {
		if (value < 10) {
			return "0" + value;
		} else {
			return value;
		}
	}
	
	tick(value) => {
	
		if (timerOn) {
			seconds -= 1;
		
			if (seconds < 0) {
				seconds = 59;
				minutes -= 1;
				
				if (minutes < 0) {
					minutes = 0;
					seconds = 0;
					timerOn = false;
				}
			}
		}
	}

	reset => {
		minutes = backup-minutes;
		seconds = backup-seconds;
	}

}